#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
    


    [global::System.Data.Linq.Mapping.DatabaseAttribute(Name="POS_System")]
	public partial class Inventory_dbDataContext : System.Data.Linq.DataContext
	{
	    
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBabyFood(BabyFood instance);
    partial void UpdateBabyFood(BabyFood instance);
    partial void DeleteBabyFood(BabyFood instance);
    partial void InsertBakery(Bakery instance);
    partial void UpdateBakery(Bakery instance);
    partial void DeleteBakery(Bakery instance);
    partial void InsertDrink(Drink instance);
    partial void UpdateDrink(Drink instance);
    partial void DeleteDrink(Drink instance);
    partial void InsertFish(Fish instance);
    partial void UpdateFish(Fish instance);
    partial void DeleteFish(Fish instance);
    partial void InsertForzenFood(ForzenFood instance);
    partial void UpdateForzenFood(ForzenFood instance);
    partial void DeleteForzenFood(ForzenFood instance);
    partial void InsertMeat(Meat instance);
    partial void UpdateMeat(Meat instance);
    partial void DeleteMeat(Meat instance);
    partial void InsertPaperAndPlastic(PaperAndPlastic instance);
    partial void UpdatePaperAndPlastic(PaperAndPlastic instance);
    partial void DeletePaperAndPlastic(PaperAndPlastic instance);
    partial void InsertPetFood(PetFood instance);
    partial void UpdatePetFood(PetFood instance);
    partial void DeletePetFood(PetFood instance);
    partial void InsertProductList(ProductList instance);
    partial void UpdateProductList(ProductList instance);
    partial void DeleteProductList(ProductList instance);
    partial void InsertRice(Rice instance);
    partial void UpdateRice(Rice instance);
    partial void DeleteRice(Rice instance);
    partial void InsertSnack(Snack instance);
    partial void UpdateSnack(Snack instance);
    partial void DeleteSnack(Snack instance);
    #endregion
		
		public Inventory_dbDataContext() : 
				base(global::DataLayer.Properties.Settings.Default.POS_SystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Inventory_dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Inventory_dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Inventory_dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Inventory_dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BabyFood> BabyFoods
		{
			get
			{
				return this.GetTable<BabyFood>();
			}
		}
		
		public System.Data.Linq.Table<Bakery> Bakeries
		{
			get
			{
				return this.GetTable<Bakery>();
			}
		}
		
		public System.Data.Linq.Table<Drink> Drinks
		{
			get
			{
				return this.GetTable<Drink>();
			}
		}
		
		public System.Data.Linq.Table<Fish> Fishes
		{
			get
			{
				return this.GetTable<Fish>();
			}
		}
		
		public System.Data.Linq.Table<ForzenFood> ForzenFoods
		{
			get
			{
				return this.GetTable<ForzenFood>();
			}
		}
		
		public System.Data.Linq.Table<Meat> Meats
		{
			get
			{
				return this.GetTable<Meat>();
			}
		}
		
		public System.Data.Linq.Table<PaperAndPlastic> PaperAndPlastics
		{
			get
			{
				return this.GetTable<PaperAndPlastic>();
			}
		}
		
		public System.Data.Linq.Table<PetFood> PetFoods
		{
			get
			{
				return this.GetTable<PetFood>();
			}
		}
		
		public System.Data.Linq.Table<ProductList> ProductLists
		{
			get
			{
				return this.GetTable<ProductList>();
			}
		}
		
		public System.Data.Linq.Table<Rice> Rices
		{
			get
			{
				return this.GetTable<Rice>();
			}
		}
		
		public System.Data.Linq.Table<Snack> Snacks
		{
			get
			{
				return this.GetTable<Snack>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BabyFood")]
	public partial class BabyFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public BabyFood()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_BabyFood", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.BabyFoods.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.BabyFoods.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bakery")]
	public partial class Bakery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _names;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnamesChanging(string value);
    partial void OnnamesChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public Bakery()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_names", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string names
		{
			get
			{
				return this._names;
			}
			set
			{
				if ((this._names != value))
				{
					this.OnnamesChanging(value);
					this.SendPropertyChanging();
					this._names = value;
					this.SendPropertyChanged("names");
					this.OnnamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Bakery", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.Bakeries.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.Bakeries.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Drinks")]
	public partial class Drink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public Drink()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Drink", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.Drinks.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.Drinks.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fish")]
	public partial class Fish : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_prices;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_pricesChanging(decimal value);
    partial void Onbuy_pricesChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public Fish()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_prices", DbType="Money NOT NULL")]
		public decimal buy_prices
		{
			get
			{
				return this._buy_prices;
			}
			set
			{
				if ((this._buy_prices != value))
				{
					this.Onbuy_pricesChanging(value);
					this.SendPropertyChanging();
					this._buy_prices = value;
					this.SendPropertyChanged("buy_prices");
					this.Onbuy_pricesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Fish", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.Fishes.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.Fishes.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ForzenFood")]
	public partial class ForzenFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public ForzenFood()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_ForzenFood", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.ForzenFoods.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.ForzenFoods.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meat")]
	public partial class Meat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _names;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnamesChanging(string value);
    partial void OnnamesChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public Meat()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_names", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string names
		{
			get
			{
				return this._names;
			}
			set
			{
				if ((this._names != value))
				{
					this.OnnamesChanging(value);
					this.SendPropertyChanging();
					this._names = value;
					this.SendPropertyChanged("names");
					this.OnnamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Meat", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.Meats.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.Meats.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaperAndPlastic")]
	public partial class PaperAndPlastic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public PaperAndPlastic()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_PaperAndPlastic", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.PaperAndPlastics.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.PaperAndPlastics.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PetFood")]
	public partial class PetFood : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public PetFood()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_PetFood", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.PetFoods.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.PetFoods.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductList")]
	public partial class ProductList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _product;
		
		private EntitySet<BabyFood> _BabyFoods;
		
		private EntitySet<Bakery> _Bakeries;
		
		private EntitySet<Drink> _Drinks;
		
		private EntitySet<Fish> _Fishes;
		
		private EntitySet<ForzenFood> _ForzenFoods;
		
		private EntitySet<Meat> _Meats;
		
		private EntitySet<PaperAndPlastic> _PaperAndPlastics;
		
		private EntitySet<PetFood> _PetFoods;
		
		private EntitySet<Rice> _Rices;
		
		private EntitySet<Snack> _Snacks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnproductChanging(string value);
    partial void OnproductChanged();
    #endregion
		
		public ProductList()
		{
			this._BabyFoods = new EntitySet<BabyFood>(new Action<BabyFood>(this.attach_BabyFoods), new Action<BabyFood>(this.detach_BabyFoods));
			this._Bakeries = new EntitySet<Bakery>(new Action<Bakery>(this.attach_Bakeries), new Action<Bakery>(this.detach_Bakeries));
			this._Drinks = new EntitySet<Drink>(new Action<Drink>(this.attach_Drinks), new Action<Drink>(this.detach_Drinks));
			this._Fishes = new EntitySet<Fish>(new Action<Fish>(this.attach_Fishes), new Action<Fish>(this.detach_Fishes));
			this._ForzenFoods = new EntitySet<ForzenFood>(new Action<ForzenFood>(this.attach_ForzenFoods), new Action<ForzenFood>(this.detach_ForzenFoods));
			this._Meats = new EntitySet<Meat>(new Action<Meat>(this.attach_Meats), new Action<Meat>(this.detach_Meats));
			this._PaperAndPlastics = new EntitySet<PaperAndPlastic>(new Action<PaperAndPlastic>(this.attach_PaperAndPlastics), new Action<PaperAndPlastic>(this.detach_PaperAndPlastics));
			this._PetFoods = new EntitySet<PetFood>(new Action<PetFood>(this.attach_PetFoods), new Action<PetFood>(this.detach_PetFoods));
			this._Rices = new EntitySet<Rice>(new Action<Rice>(this.attach_Rices), new Action<Rice>(this.detach_Rices));
			this._Snacks = new EntitySet<Snack>(new Action<Snack>(this.attach_Snacks), new Action<Snack>(this.detach_Snacks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product
		{
			get
			{
				return this._product;
			}
			set
			{
				if ((this._product != value))
				{
					this.OnproductChanging(value);
					this.SendPropertyChanging();
					this._product = value;
					this.SendPropertyChanged("product");
					this.OnproductChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_BabyFood", Storage="_BabyFoods", ThisKey="id", OtherKey="product_id")]
		public EntitySet<BabyFood> BabyFoods
		{
			get
			{
				return this._BabyFoods;
			}
			set
			{
				this._BabyFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Bakery", Storage="_Bakeries", ThisKey="id", OtherKey="product_id")]
		public EntitySet<Bakery> Bakeries
		{
			get
			{
				return this._Bakeries;
			}
			set
			{
				this._Bakeries.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Drink", Storage="_Drinks", ThisKey="id", OtherKey="product_id")]
		public EntitySet<Drink> Drinks
		{
			get
			{
				return this._Drinks;
			}
			set
			{
				this._Drinks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Fish", Storage="_Fishes", ThisKey="id", OtherKey="product_id")]
		public EntitySet<Fish> Fishes
		{
			get
			{
				return this._Fishes;
			}
			set
			{
				this._Fishes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_ForzenFood", Storage="_ForzenFoods", ThisKey="id", OtherKey="product_id")]
		public EntitySet<ForzenFood> ForzenFoods
		{
			get
			{
				return this._ForzenFoods;
			}
			set
			{
				this._ForzenFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Meat", Storage="_Meats", ThisKey="id", OtherKey="product_id")]
		public EntitySet<Meat> Meats
		{
			get
			{
				return this._Meats;
			}
			set
			{
				this._Meats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_PaperAndPlastic", Storage="_PaperAndPlastics", ThisKey="id", OtherKey="product_id")]
		public EntitySet<PaperAndPlastic> PaperAndPlastics
		{
			get
			{
				return this._PaperAndPlastics;
			}
			set
			{
				this._PaperAndPlastics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_PetFood", Storage="_PetFoods", ThisKey="id", OtherKey="product_id")]
		public EntitySet<PetFood> PetFoods
		{
			get
			{
				return this._PetFoods;
			}
			set
			{
				this._PetFoods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Rice", Storage="_Rices", ThisKey="id", OtherKey="product_id")]
		public EntitySet<Rice> Rices
		{
			get
			{
				return this._Rices;
			}
			set
			{
				this._Rices.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Snack", Storage="_Snacks", ThisKey="id", OtherKey="product_id")]
		public EntitySet<Snack> Snacks
		{
			get
			{
				return this._Snacks;
			}
			set
			{
				this._Snacks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BabyFoods(BabyFood entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_BabyFoods(BabyFood entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_Bakeries(Bakery entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_Bakeries(Bakery entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_Drinks(Drink entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_Fishes(Fish entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_ForzenFoods(ForzenFood entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_ForzenFoods(ForzenFood entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_Meats(Meat entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_Meats(Meat entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_PaperAndPlastics(PaperAndPlastic entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_PaperAndPlastics(PaperAndPlastic entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_PetFoods(PetFood entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_PetFoods(PetFood entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_Rices(Rice entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_Rices(Rice entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
		
		private void attach_Snacks(Snack entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = this;
		}
		
		private void detach_Snacks(Snack entity)
		{
			this.SendPropertyChanging();
			entity.ProductList = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rice")]
	public partial class Rice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public Rice()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Rice", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.Rices.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.Rices.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Snacks")]
	public partial class Snack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private string _name;
		
		private int _quantities;
		
		private decimal _buy_price;
		
		private decimal _sell_price;
		
		private string _product_id;
		
		private EntityRef<ProductList> _ProductList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnquantitiesChanging(int value);
    partial void OnquantitiesChanged();
    partial void Onbuy_priceChanging(decimal value);
    partial void Onbuy_priceChanged();
    partial void Onsell_priceChanging(decimal value);
    partial void Onsell_priceChanged();
    partial void Onproduct_idChanging(string value);
    partial void Onproduct_idChanged();
    #endregion
		
		public Snack()
		{
			this._ProductList = default(EntityRef<ProductList>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantities", DbType="Int NOT NULL")]
		public int quantities
		{
			get
			{
				return this._quantities;
			}
			set
			{
				if ((this._quantities != value))
				{
					this.OnquantitiesChanging(value);
					this.SendPropertyChanging();
					this._quantities = value;
					this.SendPropertyChanged("quantities");
					this.OnquantitiesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_buy_price", DbType="Money NOT NULL")]
		public decimal buy_price
		{
			get
			{
				return this._buy_price;
			}
			set
			{
				if ((this._buy_price != value))
				{
					this.Onbuy_priceChanging(value);
					this.SendPropertyChanging();
					this._buy_price = value;
					this.SendPropertyChanged("buy_price");
					this.Onbuy_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sell_price", DbType="Money NOT NULL")]
		public decimal sell_price
		{
			get
			{
				return this._sell_price;
			}
			set
			{
				if ((this._sell_price != value))
				{
					this.Onsell_priceChanging(value);
					this.SendPropertyChanging();
					this._sell_price = value;
					this.SendPropertyChanged("sell_price");
					this.Onsell_priceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_product_id", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string product_id
		{
			get
			{
				return this._product_id;
			}
			set
			{
				if ((this._product_id != value))
				{
					if (this._ProductList.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onproduct_idChanging(value);
					this.SendPropertyChanging();
					this._product_id = value;
					this.SendPropertyChanged("product_id");
					this.Onproduct_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductList_Snack", Storage="_ProductList", ThisKey="product_id", OtherKey="id", IsForeignKey=true)]
		public ProductList ProductList
		{
			get
			{
				return this._ProductList.Entity;
			}
			set
			{
				ProductList previousValue = this._ProductList.Entity;
				if (((previousValue != value) 
							|| (this._ProductList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductList.Entity = null;
						previousValue.Snacks.Remove(this);
					}
					this._ProductList.Entity = value;
					if ((value != null))
					{
						value.Snacks.Add(this);
						this._product_id = value.id;
					}
					else
					{
						this._product_id = default(string);
					}
					this.SendPropertyChanged("ProductList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
